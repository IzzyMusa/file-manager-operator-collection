name: Release

on:
  push:
    tags:
      - "**"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Determine tag
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_TAG }}

      - name: Install Ansible
        run: pip install ansible

      - name: Build Collection
        run: |
          ansible-galaxy collection build ${GITHUB_WORKSPACE}/freemanlatrell/file_manager -f --output-path ${GITHUB_WORKSPACE}
          echo "COLLECTION_BUILD=$(ls ${GITHUB_WORKSPACE} | grep file_manager)" >> $GITHUB_ENV
          echo "COLLECTION_BUILD_LOCATION=${GITHUB_WORKSPACE}/$(ls ${GITHUB_WORKSPACE} | grep file_manager)" >> $GITHUB_ENV

      - name: Upload Asset
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const assetLocation = '@' + process.env.COLLECTION_BUILD_LOCATION
              const response = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                data: assetLocation,
                name: process.env.COLLECTION_BUILD,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
  publish:
      name: Publish
      needs: release
      runs-on: ubuntu-latest

      steps:
        - name: Determine tag
          run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

        - name: Check-out repository
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            ref: ${{ env.RELEASE_TAG }}

        - name: Install Python Requirements
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'
            cache: 'pip'

        - name: Install Ansible
          run: pip install ansible

        - name: Build Collection
          run: |
            ansible-galaxy collection build ${GITHUB_WORKSPACE}/freemanlatrell/file_manager -f --output-path ${GITHUB_WORKSPACE}/freemanlatrell/file_manager/local/builds
            echo "COLLECTION_BUILD=$(ls ${GITHUB_WORKSPACE}/freemanlatrell/file_manager/local/builds)" >> $GITHUB_ENV

        - name: Sign Collection
          run: |
            echo "$PRIVATE_KEY" > privatekey.pem
            openssl rsa -in privatekey.pem -out file-manager.pub -outform PEM -pubout
            openssl dgst -sha256 -sign privatekey.pem -out file-manager-${RELEASE}.sig ${COLLECTION_BUILD}
            openssl dgst -sha256 -verify file-manager.pub -signature file-manager-${RELEASE}.sig ${COLLECTION_BUILD}
            echo "PUBLIC_KEY=$(readlink -f file-manager.pub)" >> $GITHUB_ENV
            echo "SIGNATURE=$(readlink -f file-manager-${RELEASE}.sig)" >> $GITHUB_ENV
          env:
            PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
            RELEASE:  ${{ env.RELEASE_TAG }}

        - name: Upload Signature Files
          uses: actions/github-script@v6
          with:
            github-token: "${{ secrets.GITHUB_TOKEN }}"
            script: |
              try {
                const publicKeyLocation = '@' + process.env.PUBLIC_KEY
                const response = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.RELEASE_ID,
                  data: publicKeyLocation,
                  name: file-manager.pub,
                });
                const signatureLocation = '@' + process.env.SIGNATURE
                const response = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.RELEASE_ID,
                  data: signatureLocation,
                  name: file-manager-${RELEASE}.sig,
                });
              } catch (error) {
                core.setFailed(error.message);
              }

        - name: Publish Collection to Ansible Galaxy
          run: ansible-galaxy collection publish -c -s '${GALAXY_URL}' --token='${GALAXY_API_KEY}' '${COLLECTION_BUILD}'
          env:
            GALAXY_URL: ${{ secrets.GALAXY_URL }}
            GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

